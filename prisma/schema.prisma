generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Title {
  Mr  @map("นาย")
  Mrs @map("นาง")
  Ms  @map("นางสาว")
}

enum Gender {
  Male   @map("ชาย")
  FeMale @map("หญิง")
}

enum Citizen {
  Thai       @map("ไทย")
  Cambodian  @map("กัมพูชา")
  Lao        @map("ลาว")
  Burmese    @map("พม่า")
  Vietnamese @map("เวียดนาม")
}

enum Level {
  SuperAdmin
  Admin
  User
}

enum Status {
  Active
  InActive
}

enum WorkStatus {
  CurrentEmployee
  Resign
}

enum EmploymentType {
  DAILY_WAGE
  MONTHLY_SALARY
  MONTHLY_SALARY_FOR_PERSONS_WITH_DISABILITIES
}

enum EmploymentTypes {
  FULL_TIME
  PART_TIME
  TEMPORARY
  CONTRACT
  INTERN
}

enum RequestReason {
  REPLACE_STAFF
  NEW_POSITION
  EXPANSION
  OTHER
}

enum SkillLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum PersonalRequestStatus {
  PendingManagerApprove
  ManagerCancel
  PendingHrApprove
  HrCancel
  PendingMdApprove
  MdCancel
  ApprovedSuccess
  Cancel
}

model Employee {
  employeeId        Int       @id @default(autoincrement())
  employeeTitle     Title
  employeeFirstname String    @db.VarChar(255)
  employeeLastname  String    @db.VarChar(255)
  employeeNickname  String    @db.VarChar(255)
  employeeEmail     String    @db.VarChar(255)
  employeeTel       String    @db.VarChar(255)
  employeeIdCard    String    @db.VarChar(255)
  employeeBirthday  DateTime
  employeeCitizen   Citizen
  employeeGender    Gender
  employeeLevel     Level     @default(User)
  employeeStatus    Status    @default(InActive)
  employeeCreateBy  Int
  employeeCreateAt  DateTime  @default(now()) @db.Timestamp()
  employeeUpdateBy  Int?
  employeeUpdateAt  DateTime?

  EmployeeCreateBy Employee? @relation("CreateEmployeeBy", fields: [employeeCreateBy], references: [employeeId])
  EmployeeUpdateBy Employee? @relation("UpdateEmployeeBy", fields: [employeeUpdateBy], references: [employeeId])

  createEmployee Employee[] @relation("CreateEmployeeBy")
  updateEmployee Employee[] @relation("UpdateEmployeeBy")

  employeeUser User[] @relation("UserEmployeeBy")
  createdUser  User[] @relation("UserCreatedBy")
  updatedUser  User[] @relation("UserUpdatedBy")

  employeeEmployment Employment[] @relation("EmploymentEmployeeBy")
  parentEmployment   Employment[] @relation("EmploymentParentBy")
  createdEmployment  Employment[] @relation("EmploymentCreatedBy")
  updatedEmployment  Employment[] @relation("EmploymentUpdatedBy")

  employeeEmpDocument EmpDocument[] @relation("EmpDocumentEmployeeBy")
  createdEmpDocument  EmpDocument[] @relation("EmpDocumentCreateBy")
  updatedEmpDocument  EmpDocument[] @relation("EmpDocumentUpdateBy")

  createdBranch Branch[] @relation("BranchCreateBy")
  updatedBranch Branch[] @relation("BranchUpdateBy")

  createdRole Role[] @relation("RoleCreateBy")
  updatedRole Role[] @relation("RoleUpdateBy")

  createdSite Site[] @relation("SiteCreateBy")
  updatedSite Site[] @relation("SiteUpdateBy")

  createdDivision Division[] @relation("DivisionCreateBy")
  updatedDivision Division[] @relation("DivisionUpdateBy")

  createdDepartment Department[] @relation("DepartmentCreateBy")
  updatedDepartment Department[] @relation("DepartmentUpdateBy")

  createdPosition Position[] @relation("PositionCreateBy")
  updatedPosition Position[] @relation("PositionUpdateBy")

  employeeCv Cv[] @relation("CvEmployeeBy")
  createdCv  Cv[] @relation("CvCreateBy")
  updatedCv  Cv[] @relation("CvUpdateBy")

  employeeResume Resume[] @relation("ResumeEmployeeBy")
  createdResume  Resume[] @relation("ResumeCreateBy")
  updatedResume  Resume[] @relation("ResumeUpdateBy")

  createdPersonalRequest        PersonalRequest[] @relation("PersonalRequestCreateBy")
  updatedPersonalRequest        PersonalRequest[] @relation("PersonalRequestUpdateBy")
  managerApprovePersonalRequest PersonalRequest[] @relation("PersonalRequestManagerApproveBy")
  hrApprovePersonalRequest      PersonalRequest[] @relation("PersonalRequestHrApproveBy")
  mdApprovePersonalRequest      PersonalRequest[] @relation("PersonalRequestMdApproveBy")

  @@index([employeeCreateBy])
  @@index([employeeUpdateBy])
}

model User {
  userId         Int       @id @default(autoincrement())
  userEmployeeId Int
  userUsername   String?   @db.VarChar(255)
  userPassword   String?   @db.VarChar(255)
  userCreateBy   Int
  userCreateAt   DateTime  @default(now()) @db.Timestamp()
  userUpdateBy   Int?
  userUpdateAt   DateTime?

  UserEmployeeBy Employee? @relation("UserEmployeeBy", fields: [userEmployeeId], references: [employeeId])
  UserCreateBy   Employee? @relation("UserCreatedBy", fields: [userCreateBy], references: [employeeId])
  UserUpdateBy   Employee? @relation("UserUpdatedBy", fields: [userUpdateBy], references: [employeeId])

  @@index([userEmployeeId])
  @@index([userCreateBy])
  @@index([userUpdateBy])
}

model Employment {
  employmentId                  Int             @id @default(autoincrement())
  employmentEmployeeId          Int
  employmentNumber              String?         @db.VarChar(255)
  employmentCardNumber          String?         @db.VarChar(255)
  employmentType                EmploymentType?
  employmentBranchId            Int?
  employmentSiteId              Int?
  employmentDivisionId          Int?
  employmentDepartmentId        Int?
  employmentPositionId          Int?
  employmentRoleId              Int?
  employmentParentId            Int?
  employmentStartWork           DateTime?
  employmentPicture             String?         @db.VarChar(255)
  employmentSignature           String?         @db.VarChar(255)
  employmentEnterType           String?         @db.VarChar(255)
  employmentPassportNumber      String?         @db.VarChar(255)
  employmentPassportStartDate   DateTime?
  employmentPassportEndDate     DateTime?
  employmentPassportIssuedBy    String?         @db.VarChar(255)
  employmentPlaceOfBirth        String?         @db.VarChar(255)
  employmentEnterCheckPoint     String?         @db.VarChar(255)
  employmentEnterDate           DateTime?
  employmentImmigration         String?         @db.VarChar(255)
  employmentTypeOfVisa          String?         @db.VarChar(255)
  employmentVisaNumber          String?         @db.VarChar(255)
  employmentVisaIssuedBy        String?         @db.VarChar(255)
  employmentWorkPermitNumber    String?         @db.VarChar(255)
  employmentWorkPermitStartDate DateTime?
  employmentWorkPermitEndDate   DateTime?
  employmentWorkPermitIssuedBy  String?         @db.VarChar(255)
  employmentSsoNumber           String?         @db.VarChar(255)
  employmentSsoHospital         String?         @db.VarChar(255)
  employmentWorkStatus          WorkStatus?     @default(CurrentEmployee)
  employmentCreateBy            Int
  employmentCreateAt            DateTime        @default(now()) @db.Timestamp()
  employmentUpdateBy            Int?
  employmentUpdateAt            DateTime?

  EmploymentEmployeeBy Employee? @relation("EmploymentEmployeeBy", fields: [employmentEmployeeId], references: [employeeId])
  EmploymentParentBy   Employee? @relation("EmploymentParentBy", fields: [employmentParentId], references: [employeeId])
  EmploymentCreateBy   Employee? @relation("EmploymentCreatedBy", fields: [employmentCreateBy], references: [employeeId])
  EmploymentUpdateBy   Employee? @relation("EmploymentUpdatedBy", fields: [employmentUpdateBy], references: [employeeId])

  EmploymentBranchId     Branch?     @relation("EmploymentBranchId", fields: [employmentBranchId], references: [branchId])
  EmploymentRoleId       Role?       @relation("EmploymentRoleId", fields: [employmentRoleId], references: [roleId])
  EmploymentSiteId       Site?       @relation("EmploymentSiteId", fields: [employmentSiteId], references: [siteId])
  EmploymentDivisionId   Division?   @relation("EmploymentDivisionId", fields: [employmentDivisionId], references: [divisionId])
  EmploymentDepartmentId Department? @relation("EmploymentDepartmentId", fields: [employmentDepartmentId], references: [departmentId])
  EmploymentPositionId   Position?   @relation("EmploymentPositionId", fields: [employmentPositionId], references: [positionId])

  @@index([employmentEmployeeId])
  @@index([employmentBranchId])
  @@index([employmentSiteId])
  @@index([employmentDivisionId])
  @@index([employmentDepartmentId])
  @@index([employmentPositionId])
  @@index([employmentRoleId])
  @@index([employmentParentId])
  @@index([employmentCreateBy])
  @@index([employmentUpdateBy])
}

model EmpDocument {
  empDocumentId              Int       @id @default(autoincrement())
  empDocumentEmployeeId      Int
  empDocumentIdCardFile      String?   @db.VarChar(255)
  empDocumentHomeFile        String?   @db.VarChar(255)
  empDocumentSumFile         String?   @db.VarChar(255)
  empDocumentPassportFile    String?   @db.VarChar(255)
  empDocumentImmigrationFile String?   @db.VarChar(255)
  empDocumentVisa1File       String?   @db.VarChar(255)
  empDocumentVisa2File       String?   @db.VarChar(255)
  empDocumentVisa3File       String?   @db.VarChar(255)
  empDocumentVisa4File       String?   @db.VarChar(255)
  empDocumentVisa5File       String?   @db.VarChar(255)
  empDocumentWorkPermit1File String?   @db.VarChar(255)
  empDocumentWorkPermit2File String?   @db.VarChar(255)
  empDocumentWorkPermit3File String?   @db.VarChar(255)
  empDocumentWorkPermit4File String?   @db.VarChar(255)
  empDocumentWorkPermit5File String?   @db.VarChar(255)
  empDocumentCreateBy        Int
  empDocumentCreateAt        DateTime  @default(now()) @db.Timestamp()
  empDocumentUpdateBy        Int?
  empDocumentUpdateAt        DateTime?

  EmpDocumentEmployeeBy Employee? @relation("EmpDocumentEmployeeBy", fields: [empDocumentEmployeeId], references: [employeeId])
  EmpDocumentCreateBy   Employee? @relation("EmpDocumentCreateBy", fields: [empDocumentCreateBy], references: [employeeId])
  EmpDocumentUpdateBy   Employee? @relation("EmpDocumentUpdateBy", fields: [empDocumentUpdateBy], references: [employeeId])

  @@index([empDocumentEmployeeId])
  @@index([empDocumentCreateBy])
  @@index([empDocumentUpdateBy])
}

model Resume {
  resumeId         Int       @id @default(autoincrement())
  resumeEmployeeId Int
  resumeLink       String?   @db.VarChar(255)
  resumeCreateBy   Int
  resumeCreateAt   DateTime  @default(now()) @db.Timestamp()
  resumeUpdateBy   Int?
  resumeUpdateAt   DateTime?

  ResumeEmployeeBy Employee? @relation("ResumeEmployeeBy", fields: [resumeEmployeeId], references: [employeeId])
  ResumeCreateBy   Employee? @relation("ResumeCreateBy", fields: [resumeCreateBy], references: [employeeId])
  ResumeUpdateBy   Employee? @relation("ResumeUpdateBy", fields: [resumeUpdateBy], references: [employeeId])

  @@index([resumeEmployeeId])
  @@index([resumeCreateBy])
  @@index([resumeUpdateBy])
}

model Cv {
  cvId         Int       @id @default(autoincrement())
  cvEmployeeId Int
  cvCreateBy   Int
  cvCreateAt   DateTime  @default(now()) @db.Timestamp()
  cvUpdateBy   Int?
  cvUpdateAt   DateTime?

  CvEmployeeBy Employee? @relation("CvEmployeeBy", fields: [cvEmployeeId], references: [employeeId])
  CvCreateBy   Employee? @relation("CvCreateBy", fields: [cvCreateBy], references: [employeeId])
  CvUpdateBy   Employee? @relation("CvUpdateBy", fields: [cvUpdateBy], references: [employeeId])

  CvEducation   CvEducation[]
  CvLicense     CvProfessionalLicense[]
  CvWorkHistory CvWorkHistory[]

  @@index([cvEmployeeId])
  @@index([cvCreateBy])
  @@index([cvUpdateBy])
}

model CvEducation {
  cvEducationId          Int     @id @default(autoincrement())
  cvEducationCvId        Int
  cvEducationDegree      String? @db.VarChar(255)
  cvEducationInstitution String? @db.VarChar(255)
  cvEducationStartDate   String? @db.VarChar(255)
  cvEducationEndDate     String? @db.VarChar(255)

  cv Cv @relation(fields: [cvEducationCvId], references: [cvId])

  @@index([cvEducationCvId])
}

model CvProfessionalLicense {
  cvProfessionalLicenseId        Int     @id @default(autoincrement())
  cvProfessionalLicenseCvId      Int
  cvProfessionalLicenseName      String? @db.VarChar(255)
  cvProfessionalLicenseNumber    String? @db.VarChar(255)
  cvProfessionalLicenseStartDate String? @db.VarChar(255)
  cvProfessionalLicenseEndDate   String? @db.VarChar(255)

  cv Cv @relation(fields: [cvProfessionalLicenseCvId], references: [cvId])

  @@index([cvProfessionalLicenseCvId])
}

model CvWorkHistory {
  cvWorkHistoryId          Int     @id @default(autoincrement())
  cvWorkHistoryCvId        Int
  cvWorkHistoryCompanyName String? @db.VarChar(255)
  cvWorkHistoryPosition    String? @db.VarChar(255)
  cvWorkHistoryStartDate   String? @db.VarChar(255)
  cvWorkHistoryEndDate     String? @db.VarChar(255)

  cv Cv @relation(fields: [cvWorkHistoryCvId], references: [cvId])

  projects CvProject[]

  @@index([cvWorkHistoryCvId])
}

model CvProject {
  cvProjectId            Int     @id @default(autoincrement())
  cvProjectWorkHistoryId Int
  cvProjectName          String? @db.VarChar(255)
  cvProjectDescription   String? @db.VarChar(255)

  cvWorkHistory CvWorkHistory @relation(fields: [cvProjectWorkHistoryId], references: [cvWorkHistoryId])

  @@index([cvProjectWorkHistoryId])
}

model Branch {
  branchId       Int       @id @default(autoincrement())
  branchName     String    @db.VarChar(255)
  branchStatus   Status    @default(Active)
  branchCreateBy Int
  branchCreateAt DateTime  @default(now()) @db.Timestamp()
  branchUpdateBy Int?
  branchUpdateAt DateTime?

  BranchCreateBy Employee? @relation("BranchCreateBy", fields: [branchCreateBy], references: [employeeId])
  BranchUpdateBy Employee? @relation("BranchUpdateBy", fields: [branchUpdateBy], references: [employeeId])

  branchIdEmployment Employment[] @relation("EmploymentBranchId")
  branchIdSite       Site[]       @relation("SiteBranchId")
  branchIdDivision   Division[]   @relation("DivisionBranchId")
  branchIdDepartment Department[] @relation("DepartmentBranchId")
  branchIdPosition   Position[]   @relation("PositionBranchId")

  branchIdPersonalRequest PersonalRequest[] @relation("PersonalRequestBranchId")

  @@index([branchCreateBy])
  @@index([branchUpdateBy])
}

model Role {
  roleId       Int       @id @default(autoincrement())
  roleName     String    @db.VarChar(255)
  roleStatus   Status    @default(Active)
  roleCreateBy Int
  roleCreateAt DateTime  @default(now()) @db.Timestamp()
  roleUpdateBy Int?
  roleUpdateAt DateTime?

  RoleCreateBy Employee? @relation("RoleCreateBy", fields: [roleCreateBy], references: [employeeId])
  RoleUpdateBy Employee? @relation("RoleUpdateBy", fields: [roleUpdateBy], references: [employeeId])

  roleIdEmployment Employment[] @relation("EmploymentRoleId")

  @@index([roleCreateBy])
  @@index([roleUpdateBy])
}

model Site {
  siteId       Int       @id @default(autoincrement())
  siteBranchId Int
  siteName     String    @db.VarChar(255)
  siteStatus   Status    @default(Active)
  siteCreateBy Int
  siteCreateAt DateTime  @default(now()) @db.Timestamp()
  siteUpdateBy Int?
  siteUpdateAt DateTime?

  SiteCreateBy Employee? @relation("SiteCreateBy", fields: [siteCreateBy], references: [employeeId])
  SiteUpdateBy Employee? @relation("SiteUpdateBy", fields: [siteUpdateBy], references: [employeeId])
  SiteBranchId Branch?   @relation("SiteBranchId", fields: [siteBranchId], references: [branchId])

  siteIdEmployment Employment[] @relation("EmploymentSiteId")

  @@index([siteBranchId])
  @@index([siteCreateBy])
  @@index([siteUpdateBy])
}

model Division {
  divisionId       Int       @id @default(autoincrement())
  divisionBranchId Int
  divisionName     String    @db.VarChar(255)
  divisionStatus   Status    @default(Active)
  divisionCreateBy Int
  divisionCreateAt DateTime  @default(now()) @db.Timestamp()
  divisionUpdateBy Int?
  divisionUpdateAt DateTime?

  DivisionCreateBy Employee? @relation("DivisionCreateBy", fields: [divisionCreateBy], references: [employeeId])
  DivisionUpdateBy Employee? @relation("DivisionUpdateBy", fields: [divisionUpdateBy], references: [employeeId])
  DivisionBranchId Branch?   @relation("DivisionBranchId", fields: [divisionBranchId], references: [branchId])

  divisionIdDepartment      Department[]      @relation("DepartmentDivisionId")
  divisionIdPosition        Position[]        @relation("PositionDivisionId")
  divisionIdEmployment      Employment[]      @relation("EmploymentDivisionId")
  divisionIdPersonalRequest PersonalRequest[] @relation("PersonalRequestDivisionId")

  @@index([divisionBranchId])
  @@index([divisionCreateBy])
  @@index([divisionUpdateBy])
}

model Department {
  departmentId         Int       @id @default(autoincrement())
  departmentBranchId   Int
  departmentDivisionId Int
  departmentName       String    @db.VarChar(255)
  departmentStatus     Status    @default(Active)
  departmentCreateBy   Int
  departmentCreateAt   DateTime  @default(now()) @db.Timestamp()
  departmentUpdateBy   Int?
  departmentUpdateAt   DateTime?

  DepartmentCreateBy   Employee? @relation("DepartmentCreateBy", fields: [departmentCreateBy], references: [employeeId])
  DepartmentUpdateBy   Employee? @relation("DepartmentUpdateBy", fields: [departmentUpdateBy], references: [employeeId])
  DepartmentBranchId   Branch?   @relation("DepartmentBranchId", fields: [departmentBranchId], references: [branchId])
  DepartmentDivisionId Division? @relation("DepartmentDivisionId", fields: [departmentDivisionId], references: [divisionId])

  departmentIdPosition        Position[]        @relation("PositionDepartmentId")
  departmentIdEmployment      Employment[]      @relation("EmploymentDepartmentId")
  departmentIdPersonalRequest PersonalRequest[] @relation("PersonalRequestDepartmentId")

  @@index([departmentBranchId])
  @@index([departmentDivisionId])
  @@index([departmentCreateBy])
  @@index([departmentUpdateBy])
}

model Position {
  positionId           Int       @id @default(autoincrement())
  positionBranchId     Int
  positionDivisionId   Int
  positionDepartmentId Int
  positionName         String    @db.VarChar(255)
  positionStatus       Status    @default(Active)
  positionCreateBy     Int
  positionCreateAt     DateTime  @default(now()) @db.Timestamp()
  positionUpdateBy     Int?
  positionUpdateAt     DateTime?

  PositionCreateBy     Employee?   @relation("PositionCreateBy", fields: [positionCreateBy], references: [employeeId])
  PositionUpdateBy     Employee?   @relation("PositionUpdateBy", fields: [positionUpdateBy], references: [employeeId])
  PositionBranchId     Branch?     @relation("PositionBranchId", fields: [positionBranchId], references: [branchId])
  PositionDivisionId   Division?   @relation("PositionDivisionId", fields: [positionDivisionId], references: [divisionId])
  PositionDepartmentId Department? @relation("PositionDepartmentId", fields: [positionDepartmentId], references: [departmentId])

  positionIdEmployment Employment[] @relation("EmploymentPositionId")

  positionIdPersonalRequest PersonalRequest[] @relation("PersonalRequestPositionId")

  @@index([positionBranchId])
  @@index([positionDivisionId])
  @@index([positionDepartmentId])
  @@index([positionCreateBy])
  @@index([positionUpdateBy])
}

model PersonalRequest {
  personalRequestId                     Int                   @id @default(autoincrement())
  personalRequestDocumentId             String                @db.VarChar(255)
  personalRequestAmount                 Int
  personalRequestBranchId               Int
  personalRequestDivisionId             Int
  personalRequestDepartmentId           Int
  personalRequestPositionId             Int
  personalRequestDesiredDate            DateTime
  personalRequestEmploymentType         EmploymentTypes
  personalRequestReasonForRequest       RequestReason
  personalRequestReasonGender           Gender
  personalRequestReasonAge              String                @db.VarChar(255)
  personalRequestReasonEducation        String                @db.VarChar(255)
  personalRequestReasonEnglishSkill     SkillLevel
  personalRequestReasonComputerSkill    SkillLevel
  personalRequestReasonOtherSkill       String                @db.VarChar(255)
  personalRequestReasonExperience       String                @db.VarChar(255)
  personalRequestStatus                 PersonalRequestStatus @default(PendingManagerApprove)
  personalRequestCreateBy               Int
  personalRequestCreateAt               DateTime              @default(now()) @db.Timestamp()
  personalRequestUpdateBy               Int?
  personalRequestUpdateAt               DateTime?
  personalRequestReasonManagerApproveBy Int?
  personalRequestReasonManagerApproveAt DateTime?
  personalRequestReasonHrApproveBy      Int?
  personalRequestReasonHrApproveAt      DateTime?
  personalRequestReasonMdApproveBy      Int?
  personalRequestReasonMdApproveAt      DateTime?

  PersonalRequestCreateBy         Employee? @relation("PersonalRequestCreateBy", fields: [personalRequestCreateBy], references: [employeeId])
  PersonalRequestUpdateBy         Employee? @relation("PersonalRequestUpdateBy", fields: [personalRequestUpdateBy], references: [employeeId])
  PersonalRequestManagerApproveBy Employee? @relation("PersonalRequestManagerApproveBy", fields: [personalRequestReasonManagerApproveBy], references: [employeeId])
  PersonalRequestHrApproveBy      Employee? @relation("PersonalRequestHrApproveBy", fields: [personalRequestReasonHrApproveBy], references: [employeeId])
  PersonalRequestMdApproveBy      Employee? @relation("PersonalRequestMdApproveBy", fields: [personalRequestReasonMdApproveBy], references: [employeeId])

  PersonalRequestBranchId     Branch?     @relation("PersonalRequestBranchId", fields: [personalRequestBranchId], references: [branchId])
  PersonalRequestDivisionId   Division?   @relation("PersonalRequestDivisionId", fields: [personalRequestDivisionId], references: [divisionId])
  PersonalRequestDepartmentId Department? @relation("PersonalRequestDepartmentId", fields: [personalRequestDepartmentId], references: [departmentId])
  PersonalRequestPositionId   Position?   @relation("PersonalRequestPositionId", fields: [personalRequestPositionId], references: [positionId])

  @@index([personalRequestCreateBy])
  @@index([personalRequestUpdateBy])
  @@index([personalRequestReasonManagerApproveBy])
  @@index([personalRequestReasonHrApproveBy])
  @@index([personalRequestReasonMdApproveBy])
  @@index([personalRequestBranchId])
  @@index([personalRequestDivisionId])
  @@index([personalRequestDepartmentId])
  @@index([personalRequestPositionId])
}
