generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Title {
  Mr
  Ms
  Mrs
}

enum Gender {
  Male
  FeMale
}

enum Citizen {
  Thai
  Cambodian
  Lao
  Burmese
  Vietnamese
}

enum Level {
  SuperAdmin
  Admin
  User
}

enum Status {
  Active
  InActive
}

enum WorkStatus {
  CurrentEmployee
  Resign
}

enum EmploymentType {
  DAILY_WAGE
  MONTHLY_SALARY
  MONTHLY_SALARY_FOR_PERSONS_WITH_DISABILITIES
}

model Employee {
  employeeId        Int       @id @default(autoincrement())
  employeeTitle     Title
  employeeFirstname String    @db.VarChar(255)
  employeeLastname  String    @db.VarChar(255)
  employeeNickname  String    @db.VarChar(255)
  employeeEmail     String    @db.VarChar(255)
  employeeTel       String    @db.VarChar(255)
  employeeIdCard    String    @db.VarChar(255)
  employeeBirthday  DateTime
  employeeCitizen   Citizen
  employeeGender    Gender
  employeeLevel     Level     @default(User)
  employeeStatus    Status    @default(InActive)
  employeeCreateBy  Int
  employeeCreateAt  DateTime  @default(now()) @db.Timestamp()
  employeeUpdateBy  Int?
  employeeUpdateAt  DateTime?

  EmployeeCreateBy Employee? @relation("CreateEmployeeBy", fields: [employeeCreateBy], references: [employeeId])
  EmployeeUpdateBy Employee? @relation("UpdateEmployeeBy", fields: [employeeUpdateBy], references: [employeeId])

  createEmployee Employee[] @relation("CreateEmployeeBy")
  updateEmployee Employee[] @relation("UpdateEmployeeBy")

  employeeUser User[] @relation("UserEmployeeBy")
  createdUser  User[] @relation("UserCreatedBy")
  updatedUser  User[] @relation("UserUpdatedBy")

  employeeEmployment Employment[] @relation("EmploymentEmployeeBy")
  parentEmployment   Employment[] @relation("EmploymentParentBy")
  createdEmployment  Employment[] @relation("EmploymentCreatedBy")
  updatedEmployment  Employment[] @relation("EmploymentUpdatedBy")

  employeeEmpDocument EmpDocument[] @relation("EmpDocumentEmployeeBy")
  createdEmpDocument  EmpDocument[] @relation("EmpDocumentCreateBy")
  updatedEmpDocument  EmpDocument[] @relation("EmpDocumentUpdateBy")

  createdBranch Branch[] @relation("BranchCreateBy")
  updatedBranch Branch[] @relation("BranchUpdateBy")

  createdRole Role[] @relation("RoleCreateBy")
  updatedRole Role[] @relation("RoleUpdateBy")

  createdSite Site[] @relation("SiteCreateBy")
  updatedSite Site[] @relation("SiteUpdateBy")

  createdDivision Division[] @relation("DivisionCreateBy")
  updatedDivision Division[] @relation("DivisionUpdateBy")

  createdDepartment Department[] @relation("DepartmentCreateBy")
  updatedDepartment Department[] @relation("DepartmentUpdateBy")

  createdPosition Position[] @relation("PositionCreateBy")
  updatedPosition Position[] @relation("PositionUpdateBy")
}

model User {
  userId         Int       @id @default(autoincrement())
  userEmployeeId Int
  userUsername   String?   @db.VarChar(255)
  userPassword   String?   @db.VarChar(255)
  userCreateBy   Int
  userCreateAt   DateTime  @default(now()) @db.Timestamp()
  userUpdateBy   Int?
  userUpdateAt   DateTime?

  UserEmployeeBy Employee? @relation("UserEmployeeBy", fields: [userEmployeeId], references: [employeeId])
  UserCreateBy   Employee? @relation("UserCreatedBy", fields: [userCreateBy], references: [employeeId])
  UserUpdateBy   Employee? @relation("UserUpdatedBy", fields: [userUpdateBy], references: [employeeId])
}

model Employment {
  employmentId                  Int             @id @default(autoincrement())
  employmentEmployeeId          Int
  employmentNumber              String?         @db.VarChar(255)
  employmentCardNumber          String?         @db.VarChar(255)
  employmentType                EmploymentType?
  employmentBranchId            Int?
  employmentSiteId              Int?
  employmentDivisionId          Int?
  employmentDepartmentId        Int?
  employmentPositionId          Int?
  employmentRoleId              Int?
  employmentParentId            Int?
  employmentStartWork           DateTime?
  employmentEnterType           String?         @db.VarChar(255)
  employmentPassportNumber      String?         @db.VarChar(255)
  employmentPassportStartDate   DateTime?
  employmentPassportEndDate     DateTime?
  employmentPassportIssuedBy    String?         @db.VarChar(255)
  employmentPlaceOfBirth        String?         @db.VarChar(255)
  employmentEnterCheckPoint     String?         @db.VarChar(255)
  employmentEnterDate           DateTime?
  employmentImmigration         String?         @db.VarChar(255)
  employmentTypeOfVisa          String?         @db.VarChar(255)
  employmentVisaNumber          String?         @db.VarChar(255)
  employmentVisaIssuedBy        String?         @db.VarChar(255)
  employmentWorkPermitNumber    String?         @db.VarChar(255)
  employmentWorkPermitStartDate DateTime?
  employmentWorkPermitEndDate   DateTime?
  employmentWorkPermitIssuedBy  String?         @db.VarChar(255)
  employmentSsoNumber           String?         @db.VarChar(255)
  employmentSsoHospital         String?         @db.VarChar(255)
  employmentWorkStatus          WorkStatus?     @default(CurrentEmployee)
  employmentCreateBy            Int
  employmentCreateAt            DateTime        @default(now()) @db.Timestamp()
  employmentUpdateBy            Int?
  employmentUpdateAt            DateTime?

  EmploymentEmployeeBy Employee? @relation("EmploymentEmployeeBy", fields: [employmentEmployeeId], references: [employeeId])
  EmploymentParentBy   Employee? @relation("EmploymentParentBy", fields: [employmentParentId], references: [employeeId])
  EmploymentCreateBy   Employee? @relation("EmploymentCreatedBy", fields: [employmentCreateBy], references: [employeeId])
  EmploymentUpdateBy   Employee? @relation("EmploymentUpdatedBy", fields: [employmentUpdateBy], references: [employeeId])

  EmploymentBranchId     Branch?     @relation("EmploymentBranchId", fields: [employmentBranchId], references: [branchId])
  EmploymentRoleId       Role?       @relation("EmploymentRoleId", fields: [employmentRoleId], references: [roleId])
  EmploymentSiteId       Site?       @relation("EmploymentSiteId", fields: [employmentSiteId], references: [siteId])
  EmploymentDivisionId   Division?   @relation("EmploymentDivisionId", fields: [employmentDivisionId], references: [divisionId])
  EmploymentDepartmentId Department? @relation("EmploymentDepartmentId", fields: [employmentDepartmentId], references: [departmentId])
  EmploymentPositionId   Position?   @relation("EmploymentPositionId", fields: [employmentPositionId], references: [positionId])
}

model EmpDocument {
  empDocumentId              Int       @id @default(autoincrement())
  empDocumentEmployeeId      Int
  empDocumentIdCardFile      String?   @db.VarChar(255)
  empDocumentHomeFile        String?   @db.VarChar(255)
  empDocumentSumFile         String?   @db.VarChar(255)
  empDocumentPassportFile    String?   @db.VarChar(255)
  empDocumentImmigrationFile String?   @db.VarChar(255)
  empDocumentVisa1File       String?   @db.VarChar(255)
  empDocumentVisa2File       String?   @db.VarChar(255)
  empDocumentVisa3File       String?   @db.VarChar(255)
  empDocumentVisa4File       String?   @db.VarChar(255)
  empDocumentVisa5File       String?   @db.VarChar(255)
  empDocumentWorkPermit1File String?   @db.VarChar(255)
  empDocumentWorkPermit2File String?   @db.VarChar(255)
  empDocumentWorkPermit3File String?   @db.VarChar(255)
  empDocumentWorkPermit4File String?   @db.VarChar(255)
  empDocumentWorkPermit5File String?   @db.VarChar(255)
  empDocumentCreateBy        Int
  empDocumentCreateAt        DateTime  @default(now()) @db.Timestamp()
  empDocumentUpdateBy        Int?
  empDocumentUpdateAt        DateTime?

  EmpDocumentEmployeeBy Employee? @relation("EmpDocumentEmployeeBy", fields: [empDocumentEmployeeId], references: [employeeId])
  EmpDocumentCreateBy   Employee? @relation("EmpDocumentCreateBy", fields: [empDocumentCreateBy], references: [employeeId])
  EmpDocumentUpdateBy   Employee? @relation("EmpDocumentUpdateBy", fields: [empDocumentUpdateBy], references: [employeeId])
}

model Branch {
  branchId       Int       @id @default(autoincrement())
  branchName     String    @db.VarChar(255)
  branchStatus   Status    @default(Active)
  branchCreateBy Int
  branchCreateAt DateTime  @default(now()) @db.Timestamp()
  branchUpdateBy Int?
  branchUpdateAt DateTime?

  BranchCreateBy Employee? @relation("BranchCreateBy", fields: [branchCreateBy], references: [employeeId])
  BranchUpdateBy Employee? @relation("BranchUpdateBy", fields: [branchUpdateBy], references: [employeeId])

  branchIdEmployment Employment[] @relation("EmploymentBranchId")
  branchIdSite       Site[]       @relation("SiteBranchId")
  branchIdDivision   Division[]   @relation("DivisionBranchId")
  branchIdDepartment Department[] @relation("DepartmentBranchId")
  branchIdPosition   Position[]   @relation("PositionBranchId")
}

model Role {
  roleId       Int       @id @default(autoincrement())
  roleName     String    @db.VarChar(255)
  roleStatus   Status    @default(Active)
  roleCreateBy Int
  roleCreateAt DateTime  @default(now()) @db.Timestamp()
  roleUpdateBy Int?
  roleUpdateAt DateTime?

  RoleCreateBy Employee? @relation("RoleCreateBy", fields: [roleCreateBy], references: [employeeId])
  RoleUpdateBy Employee? @relation("RoleUpdateBy", fields: [roleUpdateBy], references: [employeeId])

  roleIdEmployment Employment[] @relation("EmploymentRoleId")
}

model Site {
  siteId       Int       @id @default(autoincrement())
  siteBranchId Int
  siteName     String    @db.VarChar(255)
  siteStatus   Status    @default(Active)
  siteCreateBy Int
  siteCreateAt DateTime  @default(now()) @db.Timestamp()
  siteUpdateBy Int?
  siteUpdateAt DateTime?

  SiteCreateBy Employee? @relation("SiteCreateBy", fields: [siteCreateBy], references: [employeeId])
  SiteUpdateBy Employee? @relation("SiteUpdateBy", fields: [siteUpdateBy], references: [employeeId])
  SiteBranchId Branch?   @relation("SiteBranchId", fields: [siteBranchId], references: [branchId])

  siteIdEmployment Employment[] @relation("EmploymentSiteId")
}

model Division {
  divisionId       Int       @id @default(autoincrement())
  divisionBranchId Int
  divisionName     String    @db.VarChar(255)
  divisionStatus   Status    @default(Active)
  divisionCreateBy Int
  divisionCreateAt DateTime  @default(now()) @db.Timestamp()
  divisionUpdateBy Int?
  divisionUpdateAt DateTime?

  DivisionCreateBy Employee? @relation("DivisionCreateBy", fields: [divisionCreateBy], references: [employeeId])
  DivisionUpdateBy Employee? @relation("DivisionUpdateBy", fields: [divisionUpdateBy], references: [employeeId])
  DivisionBranchId Branch?   @relation("DivisionBranchId", fields: [divisionBranchId], references: [branchId])

  divisionIdDepartment Department[] @relation("DepartmentDivisionId")
  divisionIdPosition   Position[]   @relation("PositionDivisionId")
  divisionIdEmployment Employment[] @relation("EmploymentDivisionId")
}

model Department {
  departmentId         Int       @id @default(autoincrement())
  departmentBranchId   Int
  departmentDivisionId Int
  departmentName       String    @db.VarChar(255)
  departmentStatus     Status    @default(Active)
  departmentCreateBy   Int
  departmentCreateAt   DateTime  @default(now()) @db.Timestamp()
  departmentUpdateBy   Int?
  departmentUpdateAt   DateTime?

  DepartmentCreateBy   Employee? @relation("DepartmentCreateBy", fields: [departmentCreateBy], references: [employeeId])
  DepartmentUpdateBy   Employee? @relation("DepartmentUpdateBy", fields: [departmentUpdateBy], references: [employeeId])
  DepartmentBranchId   Branch?   @relation("DepartmentBranchId", fields: [departmentBranchId], references: [branchId])
  DepartmentDivisionId Division? @relation("DepartmentDivisionId", fields: [departmentDivisionId], references: [divisionId])

  departmentIdPosition   Position[]   @relation("PositionDepartmentId")
  departmentIdEmployment Employment[] @relation("EmploymentDepartmentId")
}

model Position {
  positionId           Int       @id @default(autoincrement())
  positionBranchId     Int
  positionDivisionId   Int
  positionDepartmentId Int
  positionName         String    @db.VarChar(255)
  positionStatus       Status    @default(Active)
  positionCreateBy     Int
  positionCreateAt     DateTime  @default(now()) @db.Timestamp()
  positionUpdateBy     Int?
  positionUpdateAt     DateTime?

  PositionCreateBy     Employee?   @relation("PositionCreateBy", fields: [positionCreateBy], references: [employeeId])
  PositionUpdateBy     Employee?   @relation("PositionUpdateBy", fields: [positionUpdateBy], references: [employeeId])
  PositionBranchId     Branch?     @relation("PositionBranchId", fields: [positionBranchId], references: [branchId])
  PositionDivisionId   Division?   @relation("PositionDivisionId", fields: [positionDivisionId], references: [divisionId])
  PositionDepartmentId Department? @relation("PositionDepartmentId", fields: [positionDepartmentId], references: [departmentId])

  positionIdEmployment Employment[] @relation("EmploymentPositionId")
}
